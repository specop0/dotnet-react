/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useBackendContext, BackendContext } from "./backendContext";
import type * as Fetcher from "./backendFetcher";
import { backendFetch } from "./backendFetcher";
import type * as Schemas from "./backendSchemas";

export type GetWeatherForecastError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ErrorResponse;
}>;

export type GetWeatherForecastResponse = Schemas.WeatherForecast[];

export type GetWeatherForecastVariables = BackendContext["fetcherOptions"];

export const fetchGetWeatherForecast = (
  variables: GetWeatherForecastVariables
) =>
  backendFetch<
    GetWeatherForecastResponse,
    GetWeatherForecastError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/WeatherForecast", method: "get", ...variables });

export const useGetWeatherForecast = <TData = GetWeatherForecastResponse>(
  variables: GetWeatherForecastVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      GetWeatherForecastResponse,
      GetWeatherForecastError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<
    GetWeatherForecastResponse,
    GetWeatherForecastError,
    TData
  >(
    queryKeyFn({
      path: "/api/WeatherForecast",
      operationId: "getWeatherForecast",
      variables,
    }),
    () => fetchGetWeatherForecast({ ...fetcherOptions, ...variables }),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation = {
  path: "/api/WeatherForecast";
  operationId: "getWeatherForecast";
  variables: GetWeatherForecastVariables;
};
